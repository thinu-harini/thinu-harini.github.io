/*
Auto-generated by: https://github.com/pmndrs/gltfjsx and edited
Author: Thinu Harini
Title: Girl
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { MathUtils } from 'three';
import { gsap } from 'gsap';
import { useFrame } from "@react-three/fiber";

import girlScene from '../assets/3d/girl.glb';

const HomeGirlModel = ({ modelRotationDirection, rotationDuration, ...props }) => {
  const girlRef = useRef();
  const { nodes, materials, animations } = useGLTF(girlScene);
  const { actions } = useAnimations(animations, girlRef);
  const targetRotation = useRef(0);

  useEffect(() => {
    // Play the 'idle' animation
    const action = actions['idle'];
    if (action) {
      action.play();
    }
  }, [actions]);

  useEffect(() => {
    if (girlRef.current) {
      const maxRotationDegrees = 45;
      const radians = MathUtils.degToRad(maxRotationDegrees);

      // Create a GSAP timeline for rotation animation
      const timeline = gsap.timeline();

      // Rotate to 45 degrees in the direction of the carousel
      timeline.to(targetRotation, {
        duration: rotationDuration / 2,
        current: modelRotationDirection * radians,
        ease: 'power1.out',
      });

      // Rotate back to the neutral position (0 degrees)
      timeline.to(targetRotation, {
        duration: rotationDuration / 2,
        current: 0,
        ease: 'power1.in',
      });
    }
  }, [modelRotationDirection, rotationDuration]);

  useFrame(() => {
    if (girlRef.current) {
      const rightForeArmBone = girlRef.current.getObjectByName('mixamorigRightForeArm');
      const rightHandBone = girlRef.current.getObjectByName('mixamorigRightHand');

      if (rightForeArmBone) {
        rightForeArmBone.rotation.y = targetRotation.current;
        // Adjust the bone rotation a little bit
        rightForeArmBone.rotation.x = MathUtils.degToRad(10);
      }

      if (rightHandBone) {
        // Adjust the bone rotation a little bit
        rightHandBone.rotation.x = MathUtils.degToRad(-40);
        rightHandBone.rotation.y = MathUtils.degToRad(-40);
        rightHandBone.rotation.z = MathUtils.degToRad(-50);
      }
    }
  });

  //scaling the head
  useFrame(() => {
    if (girlRef.current) {
      const head = girlRef.current.getObjectByName('mixamorigHead');
      if (head) {
        head.scale.set(0.8, 0.8, 0.8);
      }
    }
  });

  return (
    <group ref={girlRef} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          {/* Skinned Meshes */}
          <skinnedMesh
            name="body"
            geometry={nodes.body.geometry}
            material={materials['skin color']}
            skeleton={nodes.body.skeleton}
          />
          <skinnedMesh
            name="hair_base"
            geometry={nodes.hair_base.geometry}
            material={materials['hair color']}
            skeleton={nodes.hair_base.skeleton}
          />
          <skinnedMesh
            name="shirt"
            geometry={nodes.shirt.geometry}
            material={materials['shirt color']}
            skeleton={nodes.shirt.skeleton}
          />
          <skinnedMesh
            name="shoes"
            geometry={nodes.shoes.geometry}
            material={materials['light hair color ']}
            skeleton={nodes.shoes.skeleton}
          />
          <skinnedMesh
            name="trouser"
            geometry={nodes.trouser.geometry}
            material={materials['trouser color']}
            skeleton={nodes.trouser.skeleton}
          />
          <primitive object={nodes.mixamorigHips} />
        </group>
      </group>
    </group>
  );
};

useGLTF.preload(girlScene);

export default HomeGirlModel;
